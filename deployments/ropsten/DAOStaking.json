{
  "address": "0x088483a6AA7DB6c0E55dF573Af23D176545Ddf36",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        }
      ],
      "name": "AddTokenList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Bonus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokenList",
          "type": "address[]"
        }
      ],
      "name": "RemoveTokenList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "TransferOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accPerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        }
      ],
      "name": "UpdateBonus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ICPD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addTokenList",
          "type": "address[]"
        }
      ],
      "name": "addTokenList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "bonus",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_token_list",
          "type": "address[]"
        }
      ],
      "name": "bonusWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_addTokenList",
          "type": "address[]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userStakingIcpdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blanceHaveMintAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_removeTokenList",
          "type": "address[]"
        }
      ],
      "name": "removeTokenList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ICPD",
          "type": "address"
        }
      ],
      "name": "setICPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "tokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaking",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "userRewardDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x923bce65481df59234f0b9a33626d94cbd91d69778081e81edc3a8de7b1ee443",
  "receipt": {
    "to": null,
    "from": "0x6A4BCc2259AAd574e203b3897C67812B5f333C4e",
    "contractAddress": "0x088483a6AA7DB6c0E55dF573Af23D176545Ddf36",
    "transactionIndex": 3,
    "gasUsed": "2465277",
    "logsBloom": "0x
    "blockHash": "0x415a9020e0ceeb1bdabc3fe7c904cac131fdb983ad00694909a325ab71f17461",
    "transactionHash": "0x923bce65481df59234f0b9a33626d94cbd91d69778081e81edc3a8de7b1ee443",
    "logs": [],
    "blockNumber": 10994068,
    "cumulativeGasUsed": "2816526",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3946d96a4b46657ca95CBE85d8a60b822186Ad1f"
  ],
  "solcInputHash": "f69a72076c027afc78e230ca62f81ac9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"}],\"name\":\"AddTokenList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokenList\",\"type\":\"address[]\"}],\"name\":\"RemoveTokenList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ICPD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addTokenList\",\"type\":\"address[]\"}],\"name\":\"addTokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_token_list\",\"type\":\"address[]\"}],\"name\":\"bonusWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addTokenList\",\"type\":\"address[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStakingIcpdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blanceHaveMintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_removeTokenList\",\"type\":\"address[]\"}],\"name\":\"removeTokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ICPD\",\"type\":\"address\"}],\"name\":\"setICPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"userRewardDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256)\":{\"notice\":\"Emitted when deposit.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAOStaking.sol\":\"DAOStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":600},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/DAOStaking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\nimport './interfaces/IDAOStaking.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport 'hardhat/console.sol';\\n\\ncontract DAOStaking is Context, IDAOStaking {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address payable private _owner;\\n    address public override ICPD;\\n    // \\u7528\\u6237\\u8d28\\u62bc ICPDAO \\u7684\\u603b\\u6570\\u91cf\\n    uint256 public override totalStaking;\\n\\n    struct UserInfo {\\n        //  \\u7528\\u6237\\u8d28\\u62bc ICPDAO \\u7684\\u6570\\u91cf\\n        uint256 amount;\\n        // token => number \\u7528\\u6237\\u4e0d\\u80fd\\u5f97\\u5230\\u7684\\u5206\\u7ea2\\u603b\\u6570\\n        mapping(address => uint256) rewardDebt;\\n        // \\u7528\\u6237\\u9009\\u62e9\\u7684\\u5206\\u7ea2\\u5217\\u8868\\n        EnumerableSet.AddressSet tokens;\\n    }\\n    mapping(address => UserInfo) private _users;\\n\\n    // \\u6bcf\\u79cd\\u5206\\u7ea2 token \\u7684\\u4fe1\\u606f\\n    struct PoolInfo {\\n        uint256 accPerShare; // \\u6bcf\\u4e2a ICPDAO \\u4ee3\\u5e01\\u5e94\\u8be5\\u5f97\\u5230\\u7684\\u5206\\u7ea2\\u6570\\u91cf * 1e12\\n        uint256 userStakingIcpdAmount; // \\u9009\\u62e9\\u4e86\\u8fd9\\u4e2a\\u5206\\u7ea2\\u7684\\u7528\\u6237\\uff0c\\u4ed6\\u4eec\\u7684 icpdao \\u603b\\u8d28\\u62bc\\u6570\\u91cf\\n        // \\u5408\\u7ea6\\u7684\\u8d26\\u53f7\\u4e2d\\u62e5\\u6709\\u7684 token \\u4e2d\\uff0c\\u6709\\u591a\\u5c11\\u6570\\u91cf\\u662f\\u5df2\\u7ecf mint \\u8fc7\\u7684\\n        uint256 blanceHaveMintAmount;\\n    }\\n\\n    // token address => pool info\\n    mapping(address => PoolInfo) _poolInfos;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner, 'ICPDAO: NOT OWNER');\\n        _;\\n    }\\n\\n    constructor(address payable owner_) {\\n        _owner = owner_;\\n    }\\n\\n    function setICPToken(address _ICPD) external override onlyOwner {\\n        require(_ICPD != address(0), 'ICPDAO: _ICPD INVALID');\\n        require(ICPD == address(0), 'ICPDAO: ICPD ADDRESS EXITST');\\n        ICPD = _ICPD;\\n    }\\n\\n    function destruct() external override {\\n        require(_owner == _msgSender(), 'ICPDAO: ONLY OWNER CAN CALL DESTRUCT');\\n        selfdestruct(payable(_owner));\\n    }\\n\\n    function userInfo(address _user) external view override returns (uint256 amount, address[] memory tokens) {\\n        amount = _users[_user].amount;\\n        tokens = this.tokenList(_user);\\n    }\\n\\n    function userRewardDebt(address _user, address _token) external view override returns (uint256 rewardDebt) {\\n        rewardDebt = _users[_user].rewardDebt[_token];\\n    }\\n\\n    function poolInfo(address _token)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 accPerShare,\\n            uint256 userStakingIcpdAmount,\\n            uint256 blanceHaveMintAmount\\n        )\\n    {\\n        accPerShare = _poolInfos[_token].accPerShare;\\n        userStakingIcpdAmount = _poolInfos[_token].userStakingIcpdAmount;\\n        blanceHaveMintAmount = _poolInfos[_token].blanceHaveMintAmount;\\n    }\\n\\n    function deposit(uint256 _amount, address[] calldata _addTokenList) external override {\\n        require(_amount > 0, 'ICPDAO: AMOUNT IS ZERO');\\n        require(_msgSender() != address(this), 'ICPDAO: SENDER IS DAO');\\n        require(ICPD != address(0), 'ICPDAO: ICPD CANNOT address(0)');\\n\\n        EnumerableSet.AddressSet storage oldTokenList = _users[msg.sender].tokens;\\n        for (uint256 index = 0; index < _addTokenList.length; index++) {\\n            address token = _addTokenList[index];\\n            require(!oldTokenList.contains(token), 'ICPDAO: _addTokenList HAVE TOKEN CONTAINS oldTokenList');\\n        }\\n\\n        if (oldTokenList.length() > 0) {\\n            for (uint256 index = 0; index < oldTokenList.length(); index++) {\\n                _mintAndBonusWithDrawAndRemoveStackWithToken(oldTokenList.at(index), _users[msg.sender].amount);\\n            }\\n        }\\n\\n        for (uint256 index = 0; index < _addTokenList.length; index++) {\\n            address token = _addTokenList[index];\\n            // \\u66f4\\u65b0\\u6316\\u77ff\\n            _mintWithToken(token);\\n        }\\n\\n        // \\u628a\\u7528\\u6237\\u7684 _amount ICPDAO \\u8f6c\\u5165\\u5408\\u7ea6\\n        // TransferHelper.safeTransferFrom(icpdaoToken, msg.sender, address(this), _amount);\\n        SafeERC20.safeTransferFrom(IERC20(ICPD), _msgSender(), address(this), _amount);\\n        _users[_msgSender()].amount += _amount;\\n        totalStaking += _amount;\\n\\n        if (oldTokenList.length() > 0) {\\n            for (uint256 index = 0; index < oldTokenList.length(); index++) {\\n                address token = oldTokenList.at(index);\\n                // \\u66f4\\u65b0 pool \\u4e2d \\u7528\\u6237\\u4e2a\\u4eba\\u6570\\u636e\\n                _addUserStackAmountWithToken(token);\\n            }\\n        }\\n\\n        console.log('oldTokenList', oldTokenList.length());\\n        for (uint256 index = 0; index < _addTokenList.length; index++) {\\n            address token = _addTokenList[index];\\n            // \\u66f4\\u65b0 pool \\u4e2d \\u7528\\u6237\\u4e2a\\u4eba\\u6570\\u636e\\n            _addUserStackAmountWithToken(token);\\n            // \\u589e\\u52a0\\u5217\\u8868\\n            bool result = oldTokenList.add(token);\\n            console.log('add', token, result);\\n        }\\n        console.log('oldTokenList', _addTokenList.length, oldTokenList.length());\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        uint256 userAmount = _users[msg.sender].amount;\\n        require(_amount <= userAmount);\\n\\n        EnumerableSet.AddressSet storage userTokenList = _users[msg.sender].tokens;\\n        address[] memory _tmpTokenList = new address[](userTokenList.length());\\n        for (uint256 index = 0; index < userTokenList.length(); index++) {\\n            _tmpTokenList[index] = userTokenList.at(index);\\n        }\\n\\n        for (uint256 index = 0; index < _tmpTokenList.length; index++) {\\n            address token = _tmpTokenList[index];\\n            _mintAndBonusWithDrawAndRemoveStackWithToken(token, _amount);\\n            if (_amount == userAmount) {\\n                userTokenList.remove(token);\\n            }\\n        }\\n\\n        _users[msg.sender].amount -= _amount;\\n        totalStaking -= _amount;\\n        // TransferHelper.safeTransfer(icpdaoToken, msg.sender, _amount);\\n        SafeERC20.safeTransfer(IERC20(ICPD), _msgSender(), _amount);\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    function addTokenList(address[] calldata _addTokenList) external override {\\n        require(_addTokenList.length > 0, '_addTokenList cannot be empty');\\n        uint256 userAmount = _users[msg.sender].amount;\\n        require(userAmount > 0, 'addTokenList need userAmount > 0');\\n\\n        EnumerableSet.AddressSet storage oldTokenList = _users[msg.sender].tokens;\\n\\n        for (uint256 index = 0; index < _addTokenList.length; index++) {\\n            address token = _addTokenList[index];\\n            require(!oldTokenList.contains(token), 'ICPDAO: _addTokenList HAVE TOKEN CONTAINS oldTokenList');\\n        }\\n\\n        for (uint256 index = 0; index < _addTokenList.length; index++) {\\n            address token = _addTokenList[index];\\n            // \\u66f4\\u65b0\\u6316\\u77ff\\n            _mintWithToken(token);\\n            _addUserStackAmountWithToken(token);\\n            oldTokenList.add(token);\\n        }\\n\\n        emit AddTokenList(msg.sender, _addTokenList);\\n    }\\n\\n    function removeTokenList(address[] calldata _removeTokenList) external override {\\n        require(_removeTokenList.length > 0, '_removeTokenList cannot be empty');\\n\\n        EnumerableSet.AddressSet storage oldTokenList = _users[msg.sender].tokens;\\n\\n        for (uint256 index = 0; index < _removeTokenList.length; index++) {\\n            address token = _removeTokenList[index];\\n            require(oldTokenList.contains(token), 'ICPDAO: _removeTokenList HAVE TOKEN NOT CONTAINS oldTokenList');\\n        }\\n\\n        for (uint256 index = 0; index < _removeTokenList.length; index++) {\\n            address token = _removeTokenList[index];\\n            _mintAndBonusWithDrawAndRemoveStackWithToken(token, _users[msg.sender].amount);\\n            oldTokenList.remove(token);\\n        }\\n\\n        emit RemoveTokenList(msg.sender, _removeTokenList);\\n    }\\n\\n    function tokenList(address user) external view override returns (address[] memory) {\\n        return _tokenList(user);\\n    }\\n\\n    function bonus(address user) external view override returns (address[] memory tokens, uint256[] memory amounts) {\\n        console.log('bonus', user);\\n        tokens = _tokenList(user);\\n        amounts = new uint256[](tokens.length);\\n\\n        for (uint256 index = 0; index < tokens.length; index++) {\\n            address token = tokens[index];\\n\\n            PoolInfo storage pool = _poolInfos[token];\\n\\n            uint256 unMintAmount = _getUnMintAmount(token);\\n\\n            uint256 mockAccTokenPerShare = pool.accPerShare;\\n            if (unMintAmount > 0 && pool.userStakingIcpdAmount > 0) {\\n                uint256 addMockAccTokenPerShare = (unMintAmount * 1e12) / pool.userStakingIcpdAmount;\\n                mockAccTokenPerShare = pool.accPerShare + addMockAccTokenPerShare;\\n                console.log('addMockAccTokenPerShare', addMockAccTokenPerShare);\\n            }\\n            console.log('pool.accTokenPerShare', pool.accPerShare);\\n            console.log('mockAccTokenPerShare', mockAccTokenPerShare);\\n            console.log('unMintAmount', unMintAmount);\\n            console.log('amount', _users[user].amount);\\n            console.log('rewardDebt', _users[user].rewardDebt[token]);\\n            amounts[index] = (_users[user].amount * mockAccTokenPerShare) / 1e12 - _users[user].rewardDebt[token];\\n            console.log('result', amounts[index]);\\n        }\\n    }\\n\\n    function bonusWithdraw(address[] memory _token_list) external override {\\n        uint256 userAmount = _users[msg.sender].amount;\\n        require(userAmount > 0, 'ICPDAO: YOU NO HAVE STAKE');\\n\\n        EnumerableSet.AddressSet storage _userTokenList = _users[msg.sender].tokens;\\n\\n        for (uint256 index = 0; index < _token_list.length; index++) {\\n            address token = _token_list[index];\\n            require(_userTokenList.contains(token), 'ICPDAO: _token_list HAVE NO STAKE TOKEN');\\n        }\\n\\n        for (uint256 index = 0; index < _token_list.length; index++) {\\n            address token = _token_list[index];\\n            // \\u66f4\\u65b0\\u6316\\u77ff\\n            _mintWithToken(token);\\n            // \\u7ed3\\u7b97\\u624b\\u7eed\\u8d39\\n            _bonusWithdrawWithToken(token);\\n        }\\n    }\\n\\n    function owner() external view override returns (address result) {\\n        result = _owner;\\n    }\\n\\n    function transferOwnership(address payable newOwner) external override onlyOwner {\\n        require(newOwner != address(0));\\n        _owner = newOwner;\\n\\n        emit TransferOwnership(newOwner);\\n    }\\n\\n    function _tokenList(address user) private view returns (address[] memory result) {\\n        EnumerableSet.AddressSet storage userTokenList = _users[user].tokens;\\n        result = new address[](userTokenList.length());\\n        for (uint256 index = 0; index < userTokenList.length(); index++) {\\n            result[index] = userTokenList.at(index);\\n        }\\n    }\\n\\n    function _mintAndBonusWithDrawAndRemoveStackWithToken(address token, uint256 amount) private {\\n        // \\u66f4\\u65b0\\u6316\\u77ff\\n        _mintWithToken(token);\\n        // \\u7ed3\\u7b97\\u5206\\u7ea2\\n        _bonusWithdrawWithToken(token);\\n        // _amount \\u9000\\u51fa\\u6c60\\u5b50\\n        _removeUserStackAmountWithToken(token, amount);\\n    }\\n\\n    function _mintWithToken(address token) private {\\n        uint256 unMintAmount = _getUnMintAmount(token);\\n\\n        PoolInfo storage pool = _poolInfos[token];\\n        if (unMintAmount > 0 && pool.userStakingIcpdAmount > 0) {\\n            uint256 addAccPerShare = (unMintAmount * 1e12) / pool.userStakingIcpdAmount;\\n            pool.accPerShare += addAccPerShare;\\n            pool.blanceHaveMintAmount += (addAccPerShare * pool.userStakingIcpdAmount) / 1e12;\\n\\n            console.log('_mintWithToken addAccPerShare', addAccPerShare);\\n            console.log('_mintWithToken pool.accPerShare', pool.accPerShare);\\n            console.log('pool.userStakingIcpdAmount', pool.userStakingIcpdAmount);\\n            console.log('_mintWithToken unMintAmount', unMintAmount);\\n            console.log('_mintWithToken blanceHaveMintAmount', pool.blanceHaveMintAmount);\\n        }\\n    }\\n\\n    function _bonusWithdrawWithToken(address token) private {\\n        uint256 userAmount = _users[msg.sender].amount;\\n        if (userAmount > 0) {\\n            PoolInfo storage pool = _poolInfos[token];\\n            uint256 pending = (userAmount * pool.accPerShare) / 1e12 - _users[msg.sender].rewardDebt[token];\\n\\n            if (pending > 0) {\\n                // TransferHelper.safeTransfer(token, msg.sender, pending);\\n                SafeERC20.safeTransfer(IERC20(token), msg.sender, pending);\\n                pool.blanceHaveMintAmount = pool.blanceHaveMintAmount - pending;\\n                // pool.userPoolInfo[msg.sender].rewardDebt += pending;\\n                _users[msg.sender].rewardDebt[token] += pending;\\n                console.log('pending', pending);\\n                console.log('_users[msg.sender].rewardDebt[token]', _users[msg.sender].rewardDebt[token]);\\n                console.log('userAmount', userAmount);\\n                console.log('accTokenPerShare', pool.accPerShare);\\n            }\\n        }\\n    }\\n\\n    function _addUserStackAmountWithToken(address token) private {\\n        uint256 userAmount = _users[msg.sender].amount;\\n        require(userAmount > 0, '_addUserStackAmountWithToken need userAmount > 0');\\n\\n        PoolInfo storage pool = _poolInfos[token];\\n        pool.userStakingIcpdAmount += userAmount;\\n        _users[msg.sender].rewardDebt[token] = (pool.accPerShare * userAmount) / 1e12;\\n    }\\n\\n    function _removeUserStackAmountWithToken(address token, uint256 removeAmount) private {\\n        require(removeAmount > 0, 'ICPDAO: _removeUserStackAmountWithToken removeAmount need > 0');\\n        uint256 userAmount = _users[msg.sender].amount;\\n        require(removeAmount <= userAmount, 'ICPDAO: _removeUserStackAmountWithToken need removeAmount <= userAmount');\\n\\n        PoolInfo storage pool = _poolInfos[token];\\n        pool.userStakingIcpdAmount -= removeAmount;\\n\\n        if (removeAmount == userAmount) {\\n            _users[msg.sender].rewardDebt[token] = 0;\\n        } else {\\n            _users[msg.sender].rewardDebt[token] -= (removeAmount * pool.accPerShare) / 1e12;\\n        }\\n    }\\n\\n    function _getUnMintAmount(address token) private view returns (uint256 unMintAmount) {\\n        PoolInfo storage pool = _poolInfos[token];\\n        if (token == ICPD) {\\n            unMintAmount = IERC20(token).balanceOf(address(this)) - totalStaking - pool.blanceHaveMintAmount;\\n        } else {\\n            unMintAmount = IERC20(token).balanceOf(address(this)) - pool.blanceHaveMintAmount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ea7b17f15c7ca2ded094e9699aa42ac2a81bbafb8a1f8ba98e05bcbbdd62169\",\"license\":\"MIT\"},\"contracts/interfaces/IDAOStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/// @title A DAO Staking interface\\n/// @notice staking token must be ICP, so only deployer can set once ICP address.\\ninterface IDAOStaking {\\n    /// @notice Emitted when deposit.\\n    /// @dev The bounty will be settled before the deposit\\n    /// @param user The deposit user address\\n    /// @param amount The deposit amount\\n    event Deposit(address indexed user, uint256 amount);\\n    event UpdateBonus(address indexed token, uint256 amount, uint256 accPerShare, uint256 lastRewardBlock);\\n    event Bonus(address indexed token, address user, uint256 reward);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event AddTokenList(address indexed user, address[] tokenList);\\n    event RemoveTokenList(address indexed user, address[] tokenList);\\n    event TransferOwnership(address _newOwner);\\n\\n    function totalStaking() external returns (uint256);\\n\\n    function ICPD() external returns (address);\\n\\n    function destruct() external;\\n\\n    function userInfo(address _user) external returns (uint256 amount, address[] memory tokens);\\n\\n    function userRewardDebt(address _user, address _token) external returns (uint256 rewardDebt);\\n\\n    function poolInfo(address _token)\\n        external\\n        returns (\\n            uint256 accPerShare,\\n            uint256 userStakingIcpdAmount,\\n            uint256 blanceHaveMintAmount\\n        );\\n\\n    function setICPToken(address _ICP) external;\\n\\n    function deposit(uint256 _amount, address[] memory _tokenList) external;\\n\\n    function addTokenList(address[] memory _tokenList) external;\\n\\n    function removeTokenList(address[] memory _tokenList) external;\\n\\n    function tokenList(address _user) external view returns (address[] memory);\\n\\n    function bonus(address _user) external view returns (address[] memory, uint256[] memory);\\n\\n    function bonusWithdraw(address[] memory _token_list) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function owner() external view returns (address);\\n\\n    function transferOwnership(address payable _newOwner) external;\\n}\\n\",\"keccak256\":\"0x3dd9068bfc6cf980f19cb599c56737b9dab88b55398e7b3b615af7deefba5dfe\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002bd438038062002bd483398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008a565b6000602082840312156200006c578081fd5b81516001600160a01b038116811462000083578182fd5b9392505050565b612b3a806200009a6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806373b65b8911610097578063b44b58f111610066578063b44b58f11461027e578063d8cb4aa314610291578063e1e1f750146102b2578063f2fde38b146102c557600080fd5b806373b65b89146101e257806385d7cf86146101f55780638da5cb5b146102085780639a7b5f111461022d57600080fd5b80631d030ac9116100d35780631d030ac91461016a5780632b68b9c6146101a75780632e1a7d4d146101af57806364e9f35f146101c257600080fd5b8063165defa41461010557806316c15c751461012157806317259338146101365780631959a00214610149575b600080fd5b61010e60025481565b6040519081526020015b60405180910390f35b61013461012f366004612551565b6102d8565b005b610134610144366004612591565b61052c565b61015c6101573660046124fd565b6106b8565b604051610118929190612956565b61010e610178366004612519565b6001600160a01b0391821660009081526003602090815260408083209390941682526001909201909152205490565b610134610751565b6101346101bd3660046126e2565b6107c5565b6101d56101d03660046124fd565b6109a8565b6040516101189190612835565b6101346101f03660046124fd565b6109b9565b610134610203366004612712565b610ae5565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610118565b61026361023b3660046124fd565b6001600160a01b03166000908152600460205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610118565b61013461028c366004612551565b610f27565b6102a461029f3660046124fd565b611121565b604051610118929190612848565b600154610215906001600160a01b031681565b6101346102d33660046124fd565b6114f2565b8061032a5760405162461bcd60e51b815260206004820152601d60248201527f5f616464546f6b656e4c6973742063616e6e6f7420626520656d70747900000060448201526064015b60405180910390fd5b33600090815260036020526040902054806103875760405162461bcd60e51b815260206004820181905260248201527f616464546f6b656e4c697374206e6565642075736572416d6f756e74203e20306044820152606401610321565b336000908152600360205260408120600201905b8381101561046c5760008585838181106103c557634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103da91906124fd565b90506103e683826115b4565b156104595760405162461bcd60e51b815260206004820152603660248201527f49435044414f3a205f616464546f6b656e4c697374204841564520544f4b454e60448201527f20434f4e5441494e53206f6c64546f6b656e4c697374000000000000000000006064820152608401610321565b508061046481612a5e565b91505061039b565b5060005b838110156104e257600085858381811061049a57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906104af91906124fd565b90506104ba816115d9565b6104c3816117b9565b6104cd83826118bf565b505080806104da90612a5e565b915050610470565b50336001600160a01b03167f3d32594c5102d51489860224033bd45051204343ebb92530eae03f013f3cd31d858560405161051e9291906127e7565b60405180910390a250505050565b33600090815260036020526040902054806105895760405162461bcd60e51b815260206004820152601960248201527f49435044414f3a20594f55204e4f2048415645205354414b45000000000000006044820152606401610321565b336000908152600360205260408120600201905b83518110156106545760008482815181106105c857634e487b7160e01b600052603260045260246000fd5b602002602001015190506105e581846115b490919063ffffffff16565b6106415760405162461bcd60e51b815260206004820152602760248201527f49435044414f3a205f746f6b656e5f6c6973742048415645204e4f205354414b60448201526622902a27a5a2a760c91b6064820152608401610321565b508061064c81612a5e565b91505061059d565b5060005b83518110156106b257600084828151811061068357634e487b7160e01b600052603260045260246000fd5b60200260200101519050610696816115d9565b61069f816118d4565b50806106aa81612a5e565b915050610658565b50505050565b6001600160a01b038116600081815260036020526040908190205490516364e9f35f60e01b815260048101929092529060609030906364e9f35f9060240160006040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261074a9190810190612632565b9050915091565b6000546001600160a01b031633146107b75760405162461bcd60e51b8152602060048201526024808201527f49435044414f3a204f4e4c59204f574e45522043414e2043414c4c2044455354604482015263149550d560e21b6064820152608401610321565b6000546001600160a01b0316ff5b33600090815260036020526040902054808211156107e257600080fd5b336000908152600360205260408120600201906107fe82611a8a565b67ffffffffffffffff81111561082457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561084d578160200160208202803683370190505b50905060005b61085c83611a8a565b8110156108b75761086d8382611a94565b82828151811061088d57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806108af81612a5e565b915050610853565b5060005b81518110156109215760008282815181106108e657634e487b7160e01b600052603260045260246000fd5b602002602001015190506108fa8187611aa0565b8486141561090e5761090c8482611abc565b505b508061091981612a5e565b9150506108bb565b503360009081526003602052604081208054869290610941908490612a1b565b92505081905550836002600082825461095a9190612a1b565b9091555050600154610976906001600160a01b03163386611ad1565b60405184815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200161051e565b60606109b382611b4c565b92915050565b6000546001600160a01b03163314610a075760405162461bcd60e51b815260206004820152601160248201527024a1a82220a79d102727aa1027aba722a960791b6044820152606401610321565b6001600160a01b038116610a5d5760405162461bcd60e51b815260206004820152601560248201527f49435044414f3a205f4943504420494e56414c494400000000000000000000006044820152606401610321565b6001546001600160a01b031615610ab65760405162461bcd60e51b815260206004820152601b60248201527f49435044414f3a204943504420414444524553532045584954535400000000006044820152606401610321565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008311610b355760405162461bcd60e51b815260206004820152601660248201527f49435044414f3a20414d4f554e54204953205a45524f000000000000000000006044820152606401610321565b33301415610b855760405162461bcd60e51b815260206004820152601560248201527f49435044414f3a2053454e4445522049532044414f00000000000000000000006044820152606401610321565b6001546001600160a01b0316610bdd5760405162461bcd60e51b815260206004820152601e60248201527f49435044414f3a20494350442043414e4e4f54206164647265737328302900006044820152606401610321565b336000908152600360205260408120600201905b82811015610cc2576000848483818110610c1b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c3091906124fd565b9050610c3c83826115b4565b15610caf5760405162461bcd60e51b815260206004820152603660248201527f49435044414f3a205f616464546f6b656e4c697374204841564520544f4b454e60448201527f20434f4e5441494e53206f6c64546f6b656e4c697374000000000000000000006064820152608401610321565b5080610cba81612a5e565b915050610bf1565b506000610cce82611a8a565b1115610d1d5760005b610ce082611a8a565b811015610d1b57610d09610cf48383611a94565b33600090815260036020526040902054611aa0565b80610d1381612a5e565b915050610cd7565b505b60005b82811015610d7d576000848483818110610d4a57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610d5f91906124fd565b9050610d6a816115d9565b5080610d7581612a5e565b915050610d20565b50600154610d96906001600160a01b0316333087611c33565b3360009081526003602052604081208054869290610db59084906129c4565b925050819055508360026000828254610dce91906129c4565b9091555060009050610ddf82611a8a565b1115610e245760005b610df182611a8a565b811015610e22576000610e048383611a94565b9050610e0f816117b9565b5080610e1a81612a5e565b915050610de8565b505b610e5a6040518060400160405280600c81526020016b1bdb19151bdad95b931a5cdd60a21b815250610e5583611a8a565b611c6b565b60005b82811015610ef0576000848483818110610e8757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e9c91906124fd565b9050610ea7816117b9565b6000610eb384836118bf565b9050610edb6040518060400160405280600381526020016218591960ea1b8152508383611cb0565b50508080610ee890612a5e565b915050610e5d565b5060408051808201909152600c81526b1bdb19151bdad95b931a5cdd60a21b60208201526106b29083610f2284611a8a565b611cf7565b80610f745760405162461bcd60e51b815260206004820181905260248201527f5f72656d6f7665546f6b656e4c6973742063616e6e6f7420626520656d7074796044820152606401610321565b336000908152600360205260408120600201905b82811015611058576000848483818110610fb257634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610fc791906124fd565b9050610fd383826115b4565b6110455760405162461bcd60e51b815260206004820152603d60248201527f49435044414f3a205f72656d6f7665546f6b656e4c697374204841564520544f60448201527f4b454e204e4f5420434f4e5441494e53206f6c64546f6b656e4c6973740000006064820152608401610321565b508061105081612a5e565b915050610f88565b5060005b828110156110d857600084848381811061108657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061109b91906124fd565b336000908152600360205260409020549091506110b9908290611aa0565b6110c38382611abc565b505080806110d090612a5e565b91505061105c565b50336001600160a01b03167f7fcfae621b7a5967478b981b4cc5b034823a7196b4c60f86413928755980276184846040516111149291906127e7565b60405180910390a2505050565b60608061114b60405180604001604052806005815260200164626f6e757360d81b81525084611d3e565b61115483611b4c565b9150815167ffffffffffffffff81111561117e57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156111a7578160200160208202803683370190505b50905060005b82518110156114ec5760008382815181106111d857634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03811660009081526004909252604082209092509061120983611d83565b82549091508115801590611221575060008360010154115b1561129a57600183015460009061123d8464e8d4a510006129fc565b61124791906129dc565b84549091506112579082906129c4565b91506112986040518060400160405280601781526020017f6164644d6f636b416363546f6b656e506572536861726500000000000000000081525082611c6b565b505b6112dd6040518060400160405280601581526020017f706f6f6c2e616363546f6b656e506572536861726500000000000000000000008152508460000154611c6b565b61131c6040518060400160405280601481526020017f6d6f636b416363546f6b656e506572536861726500000000000000000000000081525082611c6b565b61135b6040518060400160405280600c81526020017f756e4d696e74416d6f756e74000000000000000000000000000000000000000081525083611c6b565b6113ab60405180604001604052806006815260200165185b5bdd5b9d60d21b815250600360008b6001600160a01b03166001600160a01b0316815260200190815260200160002060000154611c6b565b604080518082018252600a8152691c995dd85c991119589d60b21b6020808301919091526001600160a01b03808c166000908152600383528481209189168152600190910190915291909120546114029190611c6b565b6001600160a01b038089166000818152600360208181526040808420958a168452600186018252832054939092529052905464e8d4a51000906114469084906129fc565b61145091906129dc565b61145a9190612a1b565b86868151811061147a57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506114d5604051806040016040528060068152602001651c995cdd5b1d60d21b8152508787815181106114c857634e487b7160e01b600052603260045260246000fd5b6020026020010151611c6b565b5050505080806114e490612a5e565b9150506111ad565b50915091565b6000546001600160a01b031633146115405760405162461bcd60e51b815260206004820152601160248201527024a1a82220a79d102727aa1027aba722a960791b6044820152606401610321565b6001600160a01b03811661155357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a150565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60006115e482611d83565b6001600160a01b03831660009081526004602052604090209091508115801590611612575060008160010154115b156117b457600181015460009061162e8464e8d4a510006129fc565b61163891906129dc565b90508082600001600082825461164e91906129c4565b9091555050600182015464e8d4a510009061166990836129fc565b61167391906129dc565b82600201600082825461168691906129c4565b909155505060408051808201909152601d81527f5f6d696e7457697468546f6b656e20616464416363506572536861726500000060208201526116c99082611c6b565b61170c6040518060400160405280601f81526020017f5f6d696e7457697468546f6b656e20706f6f6c2e6163635065725368617265008152508360000154611c6b565b61174f6040518060400160405280601a81526020017f706f6f6c2e757365725374616b696e6749637064416d6f756e740000000000008152508360010154611c6b565b61178e6040518060400160405280601b81526020017f5f6d696e7457697468546f6b656e20756e4d696e74416d6f756e74000000000081525084611c6b565b6106b2604051806060016040528060238152602001612ae2602391398360020154611c6b565b505050565b336000908152600360205260409020548061183c5760405162461bcd60e51b815260206004820152603060248201527f5f61646455736572537461636b416d6f756e7457697468546f6b656e206e656560448201527f642075736572416d6f756e74203e2030000000000000000000000000000000006064820152608401610321565b6001600160a01b0382166000908152600460205260408120600181018054919284926118699084906129c4565b9091555050805464e8d4a51000906118829084906129fc565b61188c91906129dc565b3360009081526003602090815260408083206001600160a01b039790971683526001909601905293909320929092555050565b60006115d2836001600160a01b038416611ed4565b336000908152600360205260409020548015611a86576001600160a01b0382166000818152600460209081526040808320338452600383528184209484526001909401909152812054825464e8d4a510009061193090866129fc565b61193a91906129dc565b6119449190612a1b565b905080156106b257611957843383611ad1565b8082600201546119679190612a1b565b60028301553360009081526003602090815260408083206001600160a01b0388168452600101909152812080548392906119a29084906129c4565b909155505060408051808201909152600781526670656e64696e6760c81b60208201526119cf9082611c6b565b611a17604051806060016040528060248152602001612abe602491393360009081526003602090815260408083206001600160a01b038a168452600101909152902054611c6b565b611a436040518060400160405280600a8152602001691d5cd95c905b5bdd5b9d60b21b81525084611c6b565b6106b26040518060400160405280601081526020017f616363546f6b656e5065725368617265000000000000000000000000000000008152508360000154611c6b565b5050565b60006109b3825490565b60006115d28383611f23565b611aa9826115d9565b611ab2826118d4565b611a868282611f5b565b60006115d2836001600160a01b03841661212b565b6040516001600160a01b0383166024820152604481018290526117b490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612248565b6001600160a01b0381166000908152600360205260409020606090600201611b7381611a8a565b67ffffffffffffffff811115611b9957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611bc2578160200160208202803683370190505b50915060005b611bd182611a8a565b811015611c2c57611be28282611a94565b838281518110611c0257634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015280611c2481612a5e565b915050611bc8565b5050919050565b6040516001600160a01b03808516602483015283166044820152606481018290526106b29085906323b872dd60e01b90608401611afd565b611a868282604051602401611c8192919061290f565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905261231a565b6117b4838383604051602401611cc8939291906128dc565b60408051601f198184030181529190526020810180516001600160e01b031663324757b560e21b17905261231a565b6117b4838383604051602401611d0f93929190612931565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b17905261231a565b611a868282604051602401611d549291906128b1565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b17905261231a565b6001600160a01b0380821660008181526004602052604081206001549193909291161415611e455760028181015490546040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b158015611df257600080fd5b505afa158015611e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2a91906126fa565b611e349190612a1b565b611e3e9190612a1b565b9150611ece565b60028101546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015611e8957600080fd5b505afa158015611e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec191906126fa565b611ecb9190612a1b565b91505b50919050565b6000818152600183016020526040812054611f1b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109b3565b5060006109b3565b6000826000018281548110611f4857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008111611fd15760405162461bcd60e51b815260206004820152603d60248201527f49435044414f3a205f72656d6f766555736572537461636b416d6f756e74576960448201527f7468546f6b656e2072656d6f7665416d6f756e74206e656564203e20300000006064820152608401610321565b33600090815260036020526040902054808211156120675760405162461bcd60e51b815260206004820152604760248201527f49435044414f3a205f72656d6f766555736572537461636b416d6f756e74576960448201527f7468546f6b656e206e6565642072656d6f7665416d6f756e74203c3d207573656064820152661c905b5bdd5b9d60ca1b608482015260a401610321565b6001600160a01b038316600090815260046020526040812060018101805491928592612094908490612a1b565b9091555050828214156120cd573360009081526003602090815260408083206001600160a01b03881684526001019091528120556106b2565b805464e8d4a51000906120e090856129fc565b6120ea91906129dc565b3360009081526003602090815260408083206001600160a01b038916845260010190915281208054909190612120908490612a1b565b909155505050505050565b6000818152600183016020526040812054801561223e57600061214f600183612a1b565b855490915060009061216390600190612a1b565b90508181146121e457600086600001828154811061219157634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106121c257634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061220357634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109b3565b60009150506109b3565b600061229d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661233b9092919063ffffffff16565b8051909150156117b457808060200190518101906122bb91906126c2565b6117b45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610321565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b606061234a8484600085612352565b949350505050565b6060824710156123b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610321565b843b6124015760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610321565b600080866001600160a01b0316858760405161241d91906127cb565b60006040518083038185875af1925050503d806000811461245a576040519150601f19603f3d011682016040523d82523d6000602084013e61245f565b606091505b509150915061246f82828661247a565b979650505050505050565b606083156124895750816115d2565b8251156124995782518084602001fd5b8160405162461bcd60e51b8152600401610321919061289e565b60008083601f8401126124c4578182fd5b50813567ffffffffffffffff8111156124db578182fd5b6020830191508360208260051b85010111156124f657600080fd5b9250929050565b60006020828403121561250e578081fd5b81356115d281612aa5565b6000806040838503121561252b578081fd5b823561253681612aa5565b9150602083013561254681612aa5565b809150509250929050565b60008060208385031215612563578182fd5b823567ffffffffffffffff811115612579578283fd5b612585858286016124b3565b90969095509350505050565b600060208083850312156125a3578182fd5b823567ffffffffffffffff8111156125b9578283fd5b8301601f810185136125c9578283fd5b80356125dc6125d7826129a0565b61296f565b80828252848201915084840188868560051b87010111156125fb578687fd5b8694505b8385101561262657803561261281612aa5565b8352600194909401939185019185016125ff565b50979650505050505050565b60006020808385031215612644578182fd5b825167ffffffffffffffff81111561265a578283fd5b8301601f8101851361266a578283fd5b80516126786125d7826129a0565b80828252848201915084840188868560051b8701011115612697578687fd5b8694505b838510156126265780516126ae81612aa5565b83526001949094019391850191850161269b565b6000602082840312156126d3578081fd5b815180151581146115d2578182fd5b6000602082840312156126f3578081fd5b5035919050565b60006020828403121561270b578081fd5b5051919050565b600080600060408486031215612726578081fd5b83359250602084013567ffffffffffffffff811115612743578182fd5b61274f868287016124b3565b9497909650939450505050565b6000815180845260208085019450808401835b838110156127945781516001600160a01b03168752958201959082019060010161276f565b509495945050505050565b600081518084526127b7816020860160208601612a32565b601f01601f19169290920160200192915050565b600082516127dd818460208701612a32565b9190910192915050565b60208082528181018390526000908460408401835b8681101561282a57823561280f81612aa5565b6001600160a01b0316825291830191908301906001016127fc565b509695505050505050565b6020815260006115d2602083018461275c565b60408152600061285b604083018561275c565b828103602084810191909152845180835285820192820190845b8181101561289157845183529383019391830191600101612875565b5090979650505050505050565b6020815260006115d2602083018461279f565b6040815260006128c4604083018561279f565b90506001600160a01b03831660208301529392505050565b6060815260006128ef606083018661279f565b6001600160a01b0394909416602083015250901515604090910152919050565b604081526000612922604083018561279f565b90508260208301529392505050565b606081526000612944606083018661279f565b60208301949094525060400152919050565b82815260406020820152600061234a604083018461275c565b604051601f8201601f1916810167ffffffffffffffff8111828210171561299857612998612a8f565b604052919050565b600067ffffffffffffffff8211156129ba576129ba612a8f565b5060051b60200190565b600082198211156129d7576129d7612a79565b500190565b6000826129f757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612a1657612a16612a79565b500290565b600082821015612a2d57612a2d612a79565b500390565b60005b83811015612a4d578181015183820152602001612a35565b838111156106b25750506000910152565b6000600019821415612a7257612a72612a79565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612aba57600080fd5b5056fe5f75736572735b6d73672e73656e6465725d2e726577617264446562745b746f6b656e5d5f6d696e7457697468546f6b656e20626c616e6365486176654d696e74416d6f756e74a264697066735822122019974f2d3d0afdf2cef20255cae29ef789bdc4142e24ce47a84476bd1038056464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806373b65b8911610097578063b44b58f111610066578063b44b58f11461027e578063d8cb4aa314610291578063e1e1f750146102b2578063f2fde38b146102c557600080fd5b806373b65b89146101e257806385d7cf86146101f55780638da5cb5b146102085780639a7b5f111461022d57600080fd5b80631d030ac9116100d35780631d030ac91461016a5780632b68b9c6146101a75780632e1a7d4d146101af57806364e9f35f146101c257600080fd5b8063165defa41461010557806316c15c751461012157806317259338146101365780631959a00214610149575b600080fd5b61010e60025481565b6040519081526020015b60405180910390f35b61013461012f366004612551565b6102d8565b005b610134610144366004612591565b61052c565b61015c6101573660046124fd565b6106b8565b604051610118929190612956565b61010e610178366004612519565b6001600160a01b0391821660009081526003602090815260408083209390941682526001909201909152205490565b610134610751565b6101346101bd3660046126e2565b6107c5565b6101d56101d03660046124fd565b6109a8565b6040516101189190612835565b6101346101f03660046124fd565b6109b9565b610134610203366004612712565b610ae5565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610118565b61026361023b3660046124fd565b6001600160a01b03166000908152600460205260409020805460018201546002909201549092565b60408051938452602084019290925290820152606001610118565b61013461028c366004612551565b610f27565b6102a461029f3660046124fd565b611121565b604051610118929190612848565b600154610215906001600160a01b031681565b6101346102d33660046124fd565b6114f2565b8061032a5760405162461bcd60e51b815260206004820152601d60248201527f5f616464546f6b656e4c6973742063616e6e6f7420626520656d70747900000060448201526064015b60405180910390fd5b33600090815260036020526040902054806103875760405162461bcd60e51b815260206004820181905260248201527f616464546f6b656e4c697374206e6565642075736572416d6f756e74203e20306044820152606401610321565b336000908152600360205260408120600201905b8381101561046c5760008585838181106103c557634e487b7160e01b600052603260045260246000fd5b90506020020160208101906103da91906124fd565b90506103e683826115b4565b156104595760405162461bcd60e51b815260206004820152603660248201527f49435044414f3a205f616464546f6b656e4c697374204841564520544f4b454e60448201527f20434f4e5441494e53206f6c64546f6b656e4c697374000000000000000000006064820152608401610321565b508061046481612a5e565b91505061039b565b5060005b838110156104e257600085858381811061049a57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906104af91906124fd565b90506104ba816115d9565b6104c3816117b9565b6104cd83826118bf565b505080806104da90612a5e565b915050610470565b50336001600160a01b03167f3d32594c5102d51489860224033bd45051204343ebb92530eae03f013f3cd31d858560405161051e9291906127e7565b60405180910390a250505050565b33600090815260036020526040902054806105895760405162461bcd60e51b815260206004820152601960248201527f49435044414f3a20594f55204e4f2048415645205354414b45000000000000006044820152606401610321565b336000908152600360205260408120600201905b83518110156106545760008482815181106105c857634e487b7160e01b600052603260045260246000fd5b602002602001015190506105e581846115b490919063ffffffff16565b6106415760405162461bcd60e51b815260206004820152602760248201527f49435044414f3a205f746f6b656e5f6c6973742048415645204e4f205354414b60448201526622902a27a5a2a760c91b6064820152608401610321565b508061064c81612a5e565b91505061059d565b5060005b83518110156106b257600084828151811061068357634e487b7160e01b600052603260045260246000fd5b60200260200101519050610696816115d9565b61069f816118d4565b50806106aa81612a5e565b915050610658565b50505050565b6001600160a01b038116600081815260036020526040908190205490516364e9f35f60e01b815260048101929092529060609030906364e9f35f9060240160006040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261074a9190810190612632565b9050915091565b6000546001600160a01b031633146107b75760405162461bcd60e51b8152602060048201526024808201527f49435044414f3a204f4e4c59204f574e45522043414e2043414c4c2044455354604482015263149550d560e21b6064820152608401610321565b6000546001600160a01b0316ff5b33600090815260036020526040902054808211156107e257600080fd5b336000908152600360205260408120600201906107fe82611a8a565b67ffffffffffffffff81111561082457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561084d578160200160208202803683370190505b50905060005b61085c83611a8a565b8110156108b75761086d8382611a94565b82828151811061088d57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806108af81612a5e565b915050610853565b5060005b81518110156109215760008282815181106108e657634e487b7160e01b600052603260045260246000fd5b602002602001015190506108fa8187611aa0565b8486141561090e5761090c8482611abc565b505b508061091981612a5e565b9150506108bb565b503360009081526003602052604081208054869290610941908490612a1b565b92505081905550836002600082825461095a9190612a1b565b9091555050600154610976906001600160a01b03163386611ad1565b60405184815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200161051e565b60606109b382611b4c565b92915050565b6000546001600160a01b03163314610a075760405162461bcd60e51b815260206004820152601160248201527024a1a82220a79d102727aa1027aba722a960791b6044820152606401610321565b6001600160a01b038116610a5d5760405162461bcd60e51b815260206004820152601560248201527f49435044414f3a205f4943504420494e56414c494400000000000000000000006044820152606401610321565b6001546001600160a01b031615610ab65760405162461bcd60e51b815260206004820152601b60248201527f49435044414f3a204943504420414444524553532045584954535400000000006044820152606401610321565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60008311610b355760405162461bcd60e51b815260206004820152601660248201527f49435044414f3a20414d4f554e54204953205a45524f000000000000000000006044820152606401610321565b33301415610b855760405162461bcd60e51b815260206004820152601560248201527f49435044414f3a2053454e4445522049532044414f00000000000000000000006044820152606401610321565b6001546001600160a01b0316610bdd5760405162461bcd60e51b815260206004820152601e60248201527f49435044414f3a20494350442043414e4e4f54206164647265737328302900006044820152606401610321565b336000908152600360205260408120600201905b82811015610cc2576000848483818110610c1b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c3091906124fd565b9050610c3c83826115b4565b15610caf5760405162461bcd60e51b815260206004820152603660248201527f49435044414f3a205f616464546f6b656e4c697374204841564520544f4b454e60448201527f20434f4e5441494e53206f6c64546f6b656e4c697374000000000000000000006064820152608401610321565b5080610cba81612a5e565b915050610bf1565b506000610cce82611a8a565b1115610d1d5760005b610ce082611a8a565b811015610d1b57610d09610cf48383611a94565b33600090815260036020526040902054611aa0565b80610d1381612a5e565b915050610cd7565b505b60005b82811015610d7d576000848483818110610d4a57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610d5f91906124fd565b9050610d6a816115d9565b5080610d7581612a5e565b915050610d20565b50600154610d96906001600160a01b0316333087611c33565b3360009081526003602052604081208054869290610db59084906129c4565b925050819055508360026000828254610dce91906129c4565b9091555060009050610ddf82611a8a565b1115610e245760005b610df182611a8a565b811015610e22576000610e048383611a94565b9050610e0f816117b9565b5080610e1a81612a5e565b915050610de8565b505b610e5a6040518060400160405280600c81526020016b1bdb19151bdad95b931a5cdd60a21b815250610e5583611a8a565b611c6b565b60005b82811015610ef0576000848483818110610e8757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e9c91906124fd565b9050610ea7816117b9565b6000610eb384836118bf565b9050610edb6040518060400160405280600381526020016218591960ea1b8152508383611cb0565b50508080610ee890612a5e565b915050610e5d565b5060408051808201909152600c81526b1bdb19151bdad95b931a5cdd60a21b60208201526106b29083610f2284611a8a565b611cf7565b80610f745760405162461bcd60e51b815260206004820181905260248201527f5f72656d6f7665546f6b656e4c6973742063616e6e6f7420626520656d7074796044820152606401610321565b336000908152600360205260408120600201905b82811015611058576000848483818110610fb257634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610fc791906124fd565b9050610fd383826115b4565b6110455760405162461bcd60e51b815260206004820152603d60248201527f49435044414f3a205f72656d6f7665546f6b656e4c697374204841564520544f60448201527f4b454e204e4f5420434f4e5441494e53206f6c64546f6b656e4c6973740000006064820152608401610321565b508061105081612a5e565b915050610f88565b5060005b828110156110d857600084848381811061108657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061109b91906124fd565b336000908152600360205260409020549091506110b9908290611aa0565b6110c38382611abc565b505080806110d090612a5e565b91505061105c565b50336001600160a01b03167f7fcfae621b7a5967478b981b4cc5b034823a7196b4c60f86413928755980276184846040516111149291906127e7565b60405180910390a2505050565b60608061114b60405180604001604052806005815260200164626f6e757360d81b81525084611d3e565b61115483611b4c565b9150815167ffffffffffffffff81111561117e57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156111a7578160200160208202803683370190505b50905060005b82518110156114ec5760008382815181106111d857634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03811660009081526004909252604082209092509061120983611d83565b82549091508115801590611221575060008360010154115b1561129a57600183015460009061123d8464e8d4a510006129fc565b61124791906129dc565b84549091506112579082906129c4565b91506112986040518060400160405280601781526020017f6164644d6f636b416363546f6b656e506572536861726500000000000000000081525082611c6b565b505b6112dd6040518060400160405280601581526020017f706f6f6c2e616363546f6b656e506572536861726500000000000000000000008152508460000154611c6b565b61131c6040518060400160405280601481526020017f6d6f636b416363546f6b656e506572536861726500000000000000000000000081525082611c6b565b61135b6040518060400160405280600c81526020017f756e4d696e74416d6f756e74000000000000000000000000000000000000000081525083611c6b565b6113ab60405180604001604052806006815260200165185b5bdd5b9d60d21b815250600360008b6001600160a01b03166001600160a01b0316815260200190815260200160002060000154611c6b565b604080518082018252600a8152691c995dd85c991119589d60b21b6020808301919091526001600160a01b03808c166000908152600383528481209189168152600190910190915291909120546114029190611c6b565b6001600160a01b038089166000818152600360208181526040808420958a168452600186018252832054939092529052905464e8d4a51000906114469084906129fc565b61145091906129dc565b61145a9190612a1b565b86868151811061147a57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506114d5604051806040016040528060068152602001651c995cdd5b1d60d21b8152508787815181106114c857634e487b7160e01b600052603260045260246000fd5b6020026020010151611c6b565b5050505080806114e490612a5e565b9150506111ad565b50915091565b6000546001600160a01b031633146115405760405162461bcd60e51b815260206004820152601160248201527024a1a82220a79d102727aa1027aba722a960791b6044820152606401610321565b6001600160a01b03811661155357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a150565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b60006115e482611d83565b6001600160a01b03831660009081526004602052604090209091508115801590611612575060008160010154115b156117b457600181015460009061162e8464e8d4a510006129fc565b61163891906129dc565b90508082600001600082825461164e91906129c4565b9091555050600182015464e8d4a510009061166990836129fc565b61167391906129dc565b82600201600082825461168691906129c4565b909155505060408051808201909152601d81527f5f6d696e7457697468546f6b656e20616464416363506572536861726500000060208201526116c99082611c6b565b61170c6040518060400160405280601f81526020017f5f6d696e7457697468546f6b656e20706f6f6c2e6163635065725368617265008152508360000154611c6b565b61174f6040518060400160405280601a81526020017f706f6f6c2e757365725374616b696e6749637064416d6f756e740000000000008152508360010154611c6b565b61178e6040518060400160405280601b81526020017f5f6d696e7457697468546f6b656e20756e4d696e74416d6f756e74000000000081525084611c6b565b6106b2604051806060016040528060238152602001612ae2602391398360020154611c6b565b505050565b336000908152600360205260409020548061183c5760405162461bcd60e51b815260206004820152603060248201527f5f61646455736572537461636b416d6f756e7457697468546f6b656e206e656560448201527f642075736572416d6f756e74203e2030000000000000000000000000000000006064820152608401610321565b6001600160a01b0382166000908152600460205260408120600181018054919284926118699084906129c4565b9091555050805464e8d4a51000906118829084906129fc565b61188c91906129dc565b3360009081526003602090815260408083206001600160a01b039790971683526001909601905293909320929092555050565b60006115d2836001600160a01b038416611ed4565b336000908152600360205260409020548015611a86576001600160a01b0382166000818152600460209081526040808320338452600383528184209484526001909401909152812054825464e8d4a510009061193090866129fc565b61193a91906129dc565b6119449190612a1b565b905080156106b257611957843383611ad1565b8082600201546119679190612a1b565b60028301553360009081526003602090815260408083206001600160a01b0388168452600101909152812080548392906119a29084906129c4565b909155505060408051808201909152600781526670656e64696e6760c81b60208201526119cf9082611c6b565b611a17604051806060016040528060248152602001612abe602491393360009081526003602090815260408083206001600160a01b038a168452600101909152902054611c6b565b611a436040518060400160405280600a8152602001691d5cd95c905b5bdd5b9d60b21b81525084611c6b565b6106b26040518060400160405280601081526020017f616363546f6b656e5065725368617265000000000000000000000000000000008152508360000154611c6b565b5050565b60006109b3825490565b60006115d28383611f23565b611aa9826115d9565b611ab2826118d4565b611a868282611f5b565b60006115d2836001600160a01b03841661212b565b6040516001600160a01b0383166024820152604481018290526117b490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612248565b6001600160a01b0381166000908152600360205260409020606090600201611b7381611a8a565b67ffffffffffffffff811115611b9957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611bc2578160200160208202803683370190505b50915060005b611bd182611a8a565b811015611c2c57611be28282611a94565b838281518110611c0257634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015280611c2481612a5e565b915050611bc8565b5050919050565b6040516001600160a01b03808516602483015283166044820152606481018290526106b29085906323b872dd60e01b90608401611afd565b611a868282604051602401611c8192919061290f565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905261231a565b6117b4838383604051602401611cc8939291906128dc565b60408051601f198184030181529190526020810180516001600160e01b031663324757b560e21b17905261231a565b6117b4838383604051602401611d0f93929190612931565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b17905261231a565b611a868282604051602401611d549291906128b1565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b17905261231a565b6001600160a01b0380821660008181526004602052604081206001549193909291161415611e455760028181015490546040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b158015611df257600080fd5b505afa158015611e06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2a91906126fa565b611e349190612a1b565b611e3e9190612a1b565b9150611ece565b60028101546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015611e8957600080fd5b505afa158015611e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec191906126fa565b611ecb9190612a1b565b91505b50919050565b6000818152600183016020526040812054611f1b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109b3565b5060006109b3565b6000826000018281548110611f4857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008111611fd15760405162461bcd60e51b815260206004820152603d60248201527f49435044414f3a205f72656d6f766555736572537461636b416d6f756e74576960448201527f7468546f6b656e2072656d6f7665416d6f756e74206e656564203e20300000006064820152608401610321565b33600090815260036020526040902054808211156120675760405162461bcd60e51b815260206004820152604760248201527f49435044414f3a205f72656d6f766555736572537461636b416d6f756e74576960448201527f7468546f6b656e206e6565642072656d6f7665416d6f756e74203c3d207573656064820152661c905b5bdd5b9d60ca1b608482015260a401610321565b6001600160a01b038316600090815260046020526040812060018101805491928592612094908490612a1b565b9091555050828214156120cd573360009081526003602090815260408083206001600160a01b03881684526001019091528120556106b2565b805464e8d4a51000906120e090856129fc565b6120ea91906129dc565b3360009081526003602090815260408083206001600160a01b038916845260010190915281208054909190612120908490612a1b565b909155505050505050565b6000818152600183016020526040812054801561223e57600061214f600183612a1b565b855490915060009061216390600190612a1b565b90508181146121e457600086600001828154811061219157634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106121c257634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061220357634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109b3565b60009150506109b3565b600061229d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661233b9092919063ffffffff16565b8051909150156117b457808060200190518101906122bb91906126c2565b6117b45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610321565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b606061234a8484600085612352565b949350505050565b6060824710156123b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610321565b843b6124015760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610321565b600080866001600160a01b0316858760405161241d91906127cb565b60006040518083038185875af1925050503d806000811461245a576040519150601f19603f3d011682016040523d82523d6000602084013e61245f565b606091505b509150915061246f82828661247a565b979650505050505050565b606083156124895750816115d2565b8251156124995782518084602001fd5b8160405162461bcd60e51b8152600401610321919061289e565b60008083601f8401126124c4578182fd5b50813567ffffffffffffffff8111156124db578182fd5b6020830191508360208260051b85010111156124f657600080fd5b9250929050565b60006020828403121561250e578081fd5b81356115d281612aa5565b6000806040838503121561252b578081fd5b823561253681612aa5565b9150602083013561254681612aa5565b809150509250929050565b60008060208385031215612563578182fd5b823567ffffffffffffffff811115612579578283fd5b612585858286016124b3565b90969095509350505050565b600060208083850312156125a3578182fd5b823567ffffffffffffffff8111156125b9578283fd5b8301601f810185136125c9578283fd5b80356125dc6125d7826129a0565b61296f565b80828252848201915084840188868560051b87010111156125fb578687fd5b8694505b8385101561262657803561261281612aa5565b8352600194909401939185019185016125ff565b50979650505050505050565b60006020808385031215612644578182fd5b825167ffffffffffffffff81111561265a578283fd5b8301601f8101851361266a578283fd5b80516126786125d7826129a0565b80828252848201915084840188868560051b8701011115612697578687fd5b8694505b838510156126265780516126ae81612aa5565b83526001949094019391850191850161269b565b6000602082840312156126d3578081fd5b815180151581146115d2578182fd5b6000602082840312156126f3578081fd5b5035919050565b60006020828403121561270b578081fd5b5051919050565b600080600060408486031215612726578081fd5b83359250602084013567ffffffffffffffff811115612743578182fd5b61274f868287016124b3565b9497909650939450505050565b6000815180845260208085019450808401835b838110156127945781516001600160a01b03168752958201959082019060010161276f565b509495945050505050565b600081518084526127b7816020860160208601612a32565b601f01601f19169290920160200192915050565b600082516127dd818460208701612a32565b9190910192915050565b60208082528181018390526000908460408401835b8681101561282a57823561280f81612aa5565b6001600160a01b0316825291830191908301906001016127fc565b509695505050505050565b6020815260006115d2602083018461275c565b60408152600061285b604083018561275c565b828103602084810191909152845180835285820192820190845b8181101561289157845183529383019391830191600101612875565b5090979650505050505050565b6020815260006115d2602083018461279f565b6040815260006128c4604083018561279f565b90506001600160a01b03831660208301529392505050565b6060815260006128ef606083018661279f565b6001600160a01b0394909416602083015250901515604090910152919050565b604081526000612922604083018561279f565b90508260208301529392505050565b606081526000612944606083018661279f565b60208301949094525060400152919050565b82815260406020820152600061234a604083018461275c565b604051601f8201601f1916810167ffffffffffffffff8111828210171561299857612998612a8f565b604052919050565b600067ffffffffffffffff8211156129ba576129ba612a8f565b5060051b60200190565b600082198211156129d7576129d7612a79565b500190565b6000826129f757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612a1657612a16612a79565b500290565b600082821015612a2d57612a2d612a79565b500390565b60005b83811015612a4d578181015183820152602001612a35565b838111156106b25750506000910152565b6000600019821415612a7257612a72612a79565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612aba57600080fd5b5056fe5f75736572735b6d73672e73656e6465725d2e726577617264446562745b746f6b656e5d5f6d696e7457697468546f6b656e20626c616e6365486176654d696e74416d6f756e74a264697066735822122019974f2d3d0afdf2cef20255cae29ef789bdc4142e24ce47a84476bd1038056464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,uint256)": {
        "notice": "Emitted when deposit."
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2624,
        "contract": "contracts/DAOStaking.sol:DAOStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 2627,
        "contract": "contracts/DAOStaking.sol:DAOStaking",
        "label": "ICPD",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2630,
        "contract": "contracts/DAOStaking.sol:DAOStaking",
        "label": "totalStaking",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2645,
        "contract": "contracts/DAOStaking.sol:DAOStaking",
        "label": "_users",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UserInfo)2640_storage)"
      },
      {
        "astId": 2657,
        "contract": "contracts/DAOStaking.sol:DAOStaking",
        "label": "_poolInfos",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PoolInfo)2652_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(PoolInfo)2652_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DAOStaking.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)2652_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)2640_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DAOStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2640_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1657_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1656,
            "contract": "contracts/DAOStaking.sol:DAOStaking",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1386_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)2652_storage": {
        "encoding": "inplace",
        "label": "struct DAOStaking.PoolInfo",
        "members": [
          {
            "astId": 2647,
            "contract": "contracts/DAOStaking.sol:DAOStaking",
            "label": "accPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2649,
            "contract": "contracts/DAOStaking.sol:DAOStaking",
            "label": "userStakingIcpdAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2651,
            "contract": "contracts/DAOStaking.sol:DAOStaking",
            "label": "blanceHaveMintAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1386_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1381,
            "contract": "contracts/DAOStaking.sol:DAOStaking",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1385,
            "contract": "contracts/DAOStaking.sol:DAOStaking",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)2640_storage": {
        "encoding": "inplace",
        "label": "struct DAOStaking.UserInfo",
        "members": [
          {
            "astId": 2632,
            "contract": "contracts/DAOStaking.sol:DAOStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2636,
            "contract": "contracts/DAOStaking.sol:DAOStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2639,
            "contract": "contracts/DAOStaking.sol:DAOStaking",
            "label": "tokens",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(AddressSet)1657_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}